/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/extnetworkpolicy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExtNetworkPolicyLister helps list ExtNetworkPolicies.
// All objects returned here must be treated as read-only.
type ExtNetworkPolicyLister interface {
	// List lists all ExtNetworkPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExtNetworkPolicy, err error)
	// ExtNetworkPolicies returns an object that can list and get ExtNetworkPolicies.
	ExtNetworkPolicies(namespace string) ExtNetworkPolicyNamespaceLister
	ExtNetworkPolicyListerExpansion
}

// extNetworkPolicyLister implements the ExtNetworkPolicyLister interface.
type extNetworkPolicyLister struct {
	indexer cache.Indexer
}

// NewExtNetworkPolicyLister returns a new ExtNetworkPolicyLister.
func NewExtNetworkPolicyLister(indexer cache.Indexer) ExtNetworkPolicyLister {
	return &extNetworkPolicyLister{indexer: indexer}
}

// List lists all ExtNetworkPolicies in the indexer.
func (s *extNetworkPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ExtNetworkPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExtNetworkPolicy))
	})
	return ret, err
}

// ExtNetworkPolicies returns an object that can list and get ExtNetworkPolicies.
func (s *extNetworkPolicyLister) ExtNetworkPolicies(namespace string) ExtNetworkPolicyNamespaceLister {
	return extNetworkPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExtNetworkPolicyNamespaceLister helps list and get ExtNetworkPolicies.
// All objects returned here must be treated as read-only.
type ExtNetworkPolicyNamespaceLister interface {
	// List lists all ExtNetworkPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExtNetworkPolicy, err error)
	// Get retrieves the ExtNetworkPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ExtNetworkPolicy, error)
	ExtNetworkPolicyNamespaceListerExpansion
}

// extNetworkPolicyNamespaceLister implements the ExtNetworkPolicyNamespaceLister
// interface.
type extNetworkPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExtNetworkPolicies in the indexer for a given namespace.
func (s extNetworkPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExtNetworkPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExtNetworkPolicy))
	})
	return ret, err
}

// Get retrieves the ExtNetworkPolicy from the indexer for a given namespace and name.
func (s extNetworkPolicyNamespaceLister) Get(name string) (*v1alpha1.ExtNetworkPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("extnetworkpolicy"), name)
	}
	return obj.(*v1alpha1.ExtNetworkPolicy), nil
}
